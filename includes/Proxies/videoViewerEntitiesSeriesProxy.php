<?php

namespace videoViewer\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class videoViewerEntitiesSeriesProxy extends \videoViewer\Entities\Series implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getEpisodes()
    {
        $this->__load();
        return parent::getEpisodes();
    }

    public function getAliases()
    {
        $this->__load();
        return parent::getAliases();
    }

    public function addEpisode(\videoViewer\Entities\Video $video)
    {
        $this->__load();
        return parent::addEpisode($video);
    }

    public function addAlias(\videoViewer\Entities\SeriesAlias $alias)
    {
        $this->__load();
        return parent::addAlias($alias);
    }

    public function setDescription($desc)
    {
        $this->__load();
        return parent::setDescription($desc);
    }

    public function setImage($path)
    {
        $this->__load();
        return parent::setImage($path);
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function setSeriesId($id)
    {
        $this->__load();
        return parent::setSeriesId($id);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function getSrc()
    {
        $this->__load();
        return parent::getSrc();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function getSeriesId()
    {
        $this->__load();
        return parent::getSeriesId();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'seriesId', 'description', 'name', 'image', 'episodes', 'aliases', 'authorizedUsers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}