<?php

namespace videoViewer\Entities;

use \Mockery as m;

/**
 * Test class for User.
 * Generated by PHPUnit on 2012-10-30 at 23:42:52.
 */
class UserTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testGetWatchedVideos() {
        $video = m::mock('videoViewer\Entities\Video');
        $this->assertEquals(0,$this->object->getWatchedVideos()->count());
        $this->object->addWatchedVideo($video);
        $this->assertEquals(1,$this->object->getWatchedVideos()->count());
        $tmp = $this->object->getWatchedVideos();
        $this->assertEquals($video,$tmp[0]);
    }

    public function testGetAuthorizedSeries() {
        $series = m::mock('videoViewer\Entities\Series');
        $this->assertEquals(0,$this->object->getAuthorizedSeries()->count());
        $this->object->addAuthorizedSeries($series);
        $this->assertEquals(1,$this->object->getAuthorizedSeries()->count());
        $tmp = $this->object->getAuthorizedSeries();
        $this->assertEquals($series,$tmp[0]);
    }

    public function testGetName() {
        $this->assertEquals('',$this->object->getName());
        $this->object->setName('Test User');
        $this->assertEquals('Test User',$this->object->getName());
    }

    public function testGetPassword() {
        $this->assertEquals('',$this->object->getPassword());
        $this->object->setPassword('1234');
        $this->assertEquals('1234',$this->object->getPassword());
    }

    public function testGetUserName() {
        $this->assertEquals('',$this->object->getUserName());
        $this->object->setUserName('test@test.tes');
        $this->assertEquals('test@test.tes',$this->object->getUserName());
    }

    /**
     * @depends testGetPassword
     */
    public function testHashAndSetPassword() {
        $this->object->hashAndSetPassword('1234');
        $this->assertEquals(md5(User::SALT.'1234'),$this->object->getPassword());
    }

    /**
     * @depends testGetAuthorizedSeries
     */
    public function testCanAccessSeries() {
        $series = m::mock('videoViewer\Entities\Series');
        $this->assertFalse($this->object->canAccessSeries($series));
        $this->object->addAuthorizedSeries($series);
        $this->assertTrue($this->object->canAccessSeries($series));
    }

    /**
     * @depends testGetAuthorizedSeries
     */
    public function testRemoveAuthorizedSeries() {
        $series = m::mock('videoViewer\Entities\Series');
        $this->object->addAuthorizedSeries($series);
        $this->assertEquals(1,$this->object->getAuthorizedSeries()->count());
        $this->object->removeAuthorizedSeries($series);
        $this->assertEquals(0,$this->object->getAuthorizedSeries()->count());
    }

    /**
     * @depends testGetWatchedVideos
     */
    public function testRemoveWatchedVideo() {
        $video = m::mock('videoViewer\Entities\Video');
        $this->object->addWatchedVideo($video);
        $this->assertEquals(1,$this->object->getWatchedVideos()->count());
        $this->object->removeWatchedVideo($video);
        $this->assertEquals(0,$this->object->getWatchedVideos()->count());
    }

    /**
     * @depends testGetPassword
     * @depends testGetName
     */
    public function testGetUserHash() {
        $this->object->setPassword('1234');
        $this->object->setName('Test User');
        $this->assertEquals(md5('Test User1234'),$this->object->getUserHash());
    }

    /**
     * @depends testGetUserHash
     */
    public function testGetRokuXML() {
        $this->object->setPassword('1234');
        $this->object->setName('Test User');
        $this->assertEquals('/userxml/'.md5('Test User1234').'.xml',$this->object->getRokuXML());
    }

}

?>
