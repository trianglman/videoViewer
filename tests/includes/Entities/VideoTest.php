<?php

namespace videoViewer\Entities;

use \Mockery as m;

/**
 * Test class for Video.
 * Generated by PHPUnit on 2012-10-31 at 00:07:56.
 */
class VideoTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Video
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Video;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testGetViewers() {
        $user = m::mock('videoViewer\Entities\User');
        $user->shouldReceive('addWatchedVideo')->with($this->object)->andReturn($user);
        $this->assertEquals(0,$this->object->getViewers()->count());
        $this->object->addViewer($user);
        $this->assertEquals(1,$this->object->getViewers()->count());
        $tmp = $this->object->getViewers();
        $this->assertEquals($user,$tmp[0]);
    }

    public function testGetEpisodeName() {
        $this->assertEquals('',$this->object->getEpisodeName());
        $this->object->setEpisodeName('Episode Name');
        $this->assertEquals('Episode Name',$this->object->getEpisodeName());
    }

    public function testGetSeasonNumber() {
        $this->assertEquals(0,$this->object->getSeasonNumber());
        $this->object->setSeasonNumber(1);
        $this->assertEquals(1,$this->object->getSeasonNumber());
    }

    public function testGetAirDate() {
        $date = new \DateTime();
        $this->assertInstanceOf('\DateTime',$this->object->getAirDate());
        $this->object->setAirDate($date);
        $this->assertEquals($date,$this->object->getAirDate());
    }

    public function testGetDetails() {
        $this->assertEquals('',$this->object->getDetails());
        $this->object->setDetails('Episode details');
        $this->assertEquals('Episode details',$this->object->getDetails());
    }

    public function testGetEpisodeNumber() {
        $this->assertEquals(0,$this->object->getEpisodeNumber());
        $this->object->setEpisodeNumber(1);
        $this->assertEquals(1,$this->object->getEpisodeNumber());
    }

    public function testGetFileNameBase() {
        $this->assertEquals('',$this->object->getFileNameBase());
        $this->object->setFileNameBase('video');
        $this->assertEquals('video',$this->object->getFileNameBase());
    }

    public function testGetNotes() {
        $this->assertEquals('',$this->object->getNotes());
        $this->object->setNotes('Episode notes');
        $this->assertEquals('Episode notes',$this->object->getNotes());
    }

    public function testGetSeries() {
        $series = m::mock('videoViewer\Entities\Series');
        $this->assertNull($this->object->getSeries());
        $this->object->setSeries($series);
        $this->assertEquals($series,$this->object->getSeries());
    }

    /**
     * @depends testGetFileNameBase
     */
    public function testGetFileName() {
        $this->object->setFileNameBase('video');
        $this->assertEquals('video.ogv',$this->object->getFileName('ogg'));
        $this->assertEquals('video.mp4',$this->object->getFileName('mp4'));
        $this->assertEquals('video.jpg',$this->object->getFileName('jpg'));
    }
    
    /**
     * @depends testGetFileName
     * @expectedException RuntimeException
     * @expectedExceptionMessage This file does not exist in that format
     */
    public function testDoesntGetInvalidFileName()
    {
        $this->object->setFileNameBase('video');
        $this->object->getFileName('invalid');
    }

    /**
     * @depends testGetFileName
     */
    public function testGetFilePath() 
    {
        $di = m::mock('\videoViewer\DIContainer');
        $path = realpath(dirname(__FILE__).'/../../../includes/Entities').'/../../videos/';
        $di->shouldReceive('fileSystem')->with('file_exists',array($path.'video.ogv'))->andReturn(true);
        $this->object->setFileNameBase('video');
        $this->assertEquals($path.'video.ogv',$this->object->getFilePath('ogg',$di));
    }

    /**
     * @depends testGetFilePath
     */
    public function testGetImageFilePath() 
    {
        $di = m::mock('\videoViewer\DIContainer');
        $path = realpath(dirname(__FILE__).'/../../../includes/Entities').'/../../videos/thumbs/';
        $di->shouldReceive('fileSystem')->with('file_exists',array($path.'video.jpg'))->andReturn(true);
        $this->object->setFileNameBase('video');
        $this->assertEquals($path.'video.jpg',$this->object->getFilePath('jpg',$di));
    }

    /**
     * @depends testGetFilePath
     * 
     * @expectedException RuntimeException
     */
    public function testGetInvalidFilePath() 
    {
        $di = m::mock('\videoViewer\DIContainer');
        $path = realpath(dirname(__FILE__).'/../../../includes/Entities').'/../../videos/';
        $di->shouldReceive('fileSystem')->with('file_exists',array($path.'video.ogv'))->andReturn(false);
        $this->object->setFileNameBase('video');
        $this->object->getFilePath('ogg',$di);
    }

    /**
     * @depends testGetFilePath
     */
    public function testGetWebPath() {
        $di = m::mock('\videoViewer\DIContainer');
        $path = realpath(dirname(__FILE__).'/../../../includes/Entities').'/../../videos/';
        $di->shouldReceive('fileSystem')->with('file_exists',array($path.'video.ogv'))->andReturn(true);
        $this->object->setFileNameBase('video');
        $this->assertEquals('videos/video.ogv',$this->object->getWebPath('ogg',$di));
    }

    /**
     * @depends testGetImageFilePath
     */
    function testGetThumbnail() {
        $di = m::mock('\videoViewer\DIContainer');
        $path = realpath(dirname(__FILE__).'/../../../includes/Entities').'/../../videos/thumbs/';
        $di->shouldReceive('fileSystem')->with('file_exists',array($path.'video.jpg'))->andReturn(true);
        $this->object->setFileNameBase('video');
        $this->assertEquals('videos/thumbs/video.jpg',$this->object->getThumbnail($di));
    }

    /**
     * @depends testGetSeries
     * @depends testGetEpisodeNumber
     * @depends testGetSeasonNumber
     */
    public function test__toString() {
        $series = m::mock('videoViewer\Entities\Series');
        $series->shouldReceive('getName')->andReturn('Series Name');
        $this->object->setSeasonNumber(1);
        $this->object->setEpisodeNumber(1);
        $this->object->setSeries($series);
        $this->assertEquals('Series Name: Season 1, Episode 1',$this->object->__toString());
    }
    
}

?>
