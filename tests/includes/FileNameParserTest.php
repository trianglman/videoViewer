<?php
namespace videoViewer;
use \Mockery as m;

/**
 * Test class for FileNameParser.
 * Generated by PHPUnit on 2012-06-16 at 21:33:24.
 */
class FileNameParserTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var FileNameParser
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function teardown(){
        m::close();
    }

    /**
     * Ensures that an exception is thrown if passed a name that can't be parsed
     * @expectedException \RuntimeException
     * @expectedExceptionMessage File name did not match any patterns
     */
    public function testUnparsableName() {
        $testObj = new FileNameParser();
        $testObj->parseFileName('unparsedFile.mp4');
    }
    
    /**
     * Ensures videos named in the {series}.{yyyy-mm-dd}.{extra} format are parsed
     */
    public function testYMDAiredDateFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.2012-06-01.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals('2012-06-01',$testObj->airDate->format('Y-m-d'));
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Ensures videos named in the {series}.{yyyy-dd-mm}.{extra} format are parsed
     */
    public function testYDMAiredDateFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.2012-15-01.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals('2012-01-15',$testObj->airDate->format('Y-m-d'));
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Ensures videos named in the {series}.{mm-dd-yyyy}.{extra} format are parsed
     */
    public function testMDYAiredDateFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.06-01-2012.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals('2012-06-01',$testObj->airDate->format('Y-m-d'));
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Ensures videos named in the {series}.{dd-mm-yyyy}.{extra} format are parsed
     */
    public function testDMYAiredDateFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.15-01-2012.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals('2012-01-15',$testObj->airDate->format('Y-m-d'));
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }
    
    /**
     * Ensures videos named in the {series}.s{season}.e{episode}.{extra} format are parsed
     */
    public function testSeasonEpisodeFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.s01.e03.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals(1,$testObj->season);
        $this->assertEquals(3,$testObj->episode);
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Ensures videos named in the {series}.{season}.{episode}.{extra} format are parsed
     */
    public function testSeasonEpisodeNoMarkingFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.01.03.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals(1,$testObj->season);
        $this->assertEquals(3,$testObj->episode);
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Ensures videos named in the {series}.e{episode}.s{episode}.{extra} format are parsed
     */
    public function testEpisodeSeasonFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('Series.e03.s01.video.mp4');
        $this->assertEquals('Series',$testObj->series);
        $this->assertEquals(1,$testObj->season);
        $this->assertEquals(3,$testObj->episode);
        $this->assertEquals('video mp4',$testObj->extraInfo);
    }

    /**
     * Tests a file name that wasn't parsing properly
     */
    public function testMBFileFormat(){
        $testObj = new FileNameParser();
        $testObj->parseFileName('MythBusters.S10E05.Battle.of.the.Sexes.HDTV.XviD-AFG');
        $this->assertEquals('MythBusters',$testObj->series);
        $this->assertEquals(10,$testObj->season);
        $this->assertEquals(5,$testObj->episode);
        $this->assertEquals('Battle of the Sexes HDTV XviD-AFG',$testObj->extraInfo);
    }

}

?>
